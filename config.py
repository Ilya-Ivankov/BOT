import requests
import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from email import message
from db import Database
from cgitb import text
from email import message

API_KEY = '5711390928:AAGEM1AgG3WrV0TL3Lsa273P5m0o0_zni5g'
open_weather_token = '5b423686873e6d56fcfaa17fe427eff5'

bot = Bot(token=API_KEY)
dp = Dispatcher(bot)
db = Database('databace.db')

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.reply("‚òÅ–ü—Ä–∏–≤–µ—Ç!\nüèô –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!\n\n–ü—Ä–∏–º–µ—Ä:\n–ú–æ—Å–∫–≤–∞ –∏–ª–∏ Moscow\n")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["–ú–µ–Ω—é"]
    keyboard.add(*buttons)
    if not db.user_exists(message.from_user.id):#–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 
        db.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "")
    await message.answer("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ '–ú–µ–Ω—é'\n–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –ú–µ–Ω—é", reply_markup=keyboard)

@dp.message_handler(commands="sendall")
async def sendall(message: types.Message):
    if message.from_user.id == 1471702705:
        text = message.text[9:]
        users = db.get_users()
        for row in users:
            try:
                await bot.send_message(row[0], text)
                if int(row[1]) != 1:
                    db.set_active(row[0], 1)
            except:
                db.set_active(row[0], 1)

    await bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞")

@dp.message_handler(lambda message: message.text == "–ú–µ–Ω—é")
async def without_puree(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="‚ùó–ü–æ–¥–ø–∏—Å–∫–∞  –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="podp"))
    keyboard.add(types.InlineKeyboardButton(text="‚ùå–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="podp2"))
    keyboard.add(types.InlineKeyboardButton(text="‚ùì–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"))
    await message.answer("üü©–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!", reply_markup=keyboard)

@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):

    buttons = [
        types.InlineKeyboardButton(text="ü§ñ GitHub –±–æ—Ç–∞", url="https://github.com/Ilya-Ivankov/BOT"),
        types.InlineKeyboardButton(text="‚úà Telegram –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞", url="https://t.me/ilya_ivankov"),
        types.InlineKeyboardButton(text="üèõ –°–∞–π—Ç –ú–æ—Å. –ü–æ–ª–∏—Ç–µ—Ö–∞", url="https://mospolytech.ru/"),
        types.InlineKeyboardButton(text="üñ• –§–ò–¢ –ú–æ—Å. –ü–æ–ª–∏—Ç–µ—Ö–∞", url="https://fit.mospolytech.ru/"),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="info")  
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer("üü©–°—Å—ã–ª–∫–∏", reply_markup=keyboard)

@dp.callback_query_handler(text="podp")
async def without_puree(call: types.CallbackQuery):
    buttons = [
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ", reply_markup=keyboard)
    await call.message.answer("–ü–æ–ª—É—á–∞–µ–π —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–≤—ã–º!", reply_markup=keyboard)

@dp.callback_query_handler(text="podp2")
async def without_puree(call: types.CallbackQuery):
    db.del_user(call.message.from_user.id)
    buttons = [
        types.InlineKeyboardButton(text="‚úà Telegram –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞", url="https://t.me/ilya_ivankov"),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer("–û—Ç–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞")
    await call.message.answer("–û—Ç–ø–∏—à–∏ –∞–≤—Ç–æ—Ä—É –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å", reply_markup=keyboard)

@dp.callback_query_handler(text="info")
async def without_puree(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∏", callback_data="random_value"),
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer("‚úÖ–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–º –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –ü–æ–ª–∏—Ç–µ—Ö–∞ –ò–≤–∞–Ω—å–∫–æ–≤—ã–º –ò. (201-363)\n‚ùá–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –∏–Ω—Ç—Ä–µ—Å—É—é—â–∏–º –í–∞—Å –≥–æ—Ä–æ–¥–µ \n‚ú≥–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: v 0.0.1", reply_markup=keyboard)      

@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }
    try:
        r = requests.get(
            f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]

        weather_description = data["weather"][0]["main"]
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = "‚ôª"

        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]
        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"]).strftime('%H:%M')
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"]).strftime('%H:%M')
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

        await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
              f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
              f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
              f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
              f"***–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!*** "
              )

    except:
        await message.reply("\U00002620 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002620")

if __name__ == '__main__':
    executor.start_polling(dp)

    